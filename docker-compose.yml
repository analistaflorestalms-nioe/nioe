version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nioe_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-nioe_db}
      POSTGRES_USER: ${DB_USER:-nioe_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-nioe123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - nioe_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nioe_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nioe_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nioe_backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3001}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-nioe_db}
      DB_USER: ${DB_USER:-nioe_user}
      DB_PASSWORD: ${DB_PASSWORD:-nioe123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-nioe_jwt_secret_2024_ultra_secure}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "3001:3001"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - nioe_network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nioe_frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001}
      REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL:-http://localhost:3001}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - nioe_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  nioe_network:
    driver: bridge